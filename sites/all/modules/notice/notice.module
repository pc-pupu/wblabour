<?php
function notice_permission() {
  return array(
    'cmsnotice_per' => array(
      'title' => t('cms Notice add/edit permission'),
    ),
	'notice_per' => array(
      'title' => t('Notice list permission'),
    )
  );
}

function notice_menu(){ 
 $items['notice'] = array(
	'title' => 'Notice List',
	//'page callback' => 'notice_list',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('notice_list_form'),
	'access arguments' => array('notice_per'),
  );
  $items['cmsentry/cmsnotice'] = array(
	'title' => 'CMS Notice List',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('cmsnotice_list'),
	'access arguments' => array('cmsnotice_per'),
  );
  $items['cmsentry/testfileupload'] = array(
	'title' => 'Test File Upload',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('test_upload'),
	'access arguments' => array('cmsnotice_per'),
  );	 
  $items['cmsentry/cmsnotice/addcmsnotice'] = array(
	'title' => 'CMS Notice Entry',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('add_notice'),
	'access arguments' => array('cmsnotice_per'),
  );
  $items['cmsentry/cmsnotice/%/cmsnoticeedit'] = array(
	'title' => 'CMS Notice Edit',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('edit_notice',2),
	'access arguments' => array('cmsnotice_per'),
  );
<<<<<<< HEAD

 $items['cmsentry/notice/download/%'] = array(
  'title' => 'Secure Download for Notice',
  'page callback' => 'notice_secure_file_download',
  'page arguments' => array(3),
  'access arguments' => array('cmsnotice_per'),
  'type' => MENU_CALLBACK,
);



  return $items;
}

function notice_secure_file_download($filename) {
  $filepath = 'public://upload/notice/' . $filename;

  if (file_exists(drupal_realpath($filepath))) {
    $realpath = drupal_realpath($filepath);
    $mime_type = file_get_mimetype($realpath);

    header('Content-Type: ' . $mime_type);
    header('Content-Disposition: attachment; filename="' . $safe_filename . '"');
    header('Content-Length: ' . filesize($realpath));
    readfile($realpath);
    exit;
  }
  else {
    drupal_set_message(t('File not found.'), 'error');
    drupal_goto('cmsentry/cmsnotice');
  }
}


=======
  return $items;
}

>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
function test_upload($form, &$form_state){
	$form['#attributes']['class'][] = 'sky-form custom-form-main';
	$form['doc_file'] = array(
			'#type' => 'file',
			//'#required' => TRUE,
			'#title' => t('Upload (PDF only)'),
			'#description' => t('Max size 25MB'),
			'#attributes' => array('class'=>array('form-control'),'placeholder'=>'Upload documents'),
			//'#prefix' => '<div id="doc_file_replace_div"><div class="col-md-2">',
			//'#suffix' => '</div></div>'
	    );
	$form['submit_btn'] = array(
			'#type' => 'submit',
			//'#submit'=> array(),
			/*'#ajax' => array(
					'callback' => 'ajax_add_sarfy_callback',
					//'wrapper' => 'table_div_replace',
				),*/
			//'#limit_validation_errors' => array(),	
			'#value' => t('Add'),
			//'#attributes' => array('class'=>array('btn btn-info')),
			//'#prefix' => '<div id="add_more_btn_replace_div"><div class="col-md-2">',
			//'#suffix' => '</div></div>'
		);
	return $form;	 
}

function test_upload_submit($form, &$form_state){
	//die("hello");
	if(trim($_FILES['files']['name']['doc_file'])!=""){
		
		$file_name = trim($_FILES['files']['name']['doc_file']);
		$file_path = $_FILES['files']['tmp_name']['doc_file'];
	  	$file_size = $_FILES['files']['size']['doc_file'];
		$file_ext = pathinfo($file_name, PATHINFO_EXTENSION);
		
		$directory_path	=	file_default_scheme().'://upload/notice/';
		
		$extensions = 'pdf' ; 

	    $validators = array(
		   'file_validate_extensions' => array($extensions),   
		   'file_validate_size' => array(25*1024*1024) // 5MB
		);
		
		$error_description = "";
		if(!$file = file_save_upload('doc_file', $validators, $directory_path, FILE_EXISTS_RENAME)){
			//die('not uploaded');
			
			if(strtolower(trim($file_ext)) != 'pdf'){
				$error_description = "Allow to upload PDF only";
			}else if($file_size >= (1*1024*1024)){
				$error_description = "File is too big";
			}else{
				$error_description = "Unable to upload file";
			}
			drupal_set_message($error_description);
		}else{
			//$file_name = $file->filename;
			
			$file_uri = $file->uri;
			//$file_contents = file_get_contents($file_uri);
			$file->status = FILE_STATUS_PERMANENT; //ADDED
		    file_save($file);
			drupal_set_message('Upload successfully.');
		}
	}else{
		drupal_set_message('Your Record has been inserted successfully.');
	}
			
}

function notice_list_form($form, &$form_state){
	
  global $base_root, $base_path;
  drupal_add_css(drupal_get_path('module', 'applicant_registration') . '/css/sky-forms.css');
  drupal_add_css(drupal_get_path('module', 'applicant_registration') . '/css/form-design.css');
 
  drupal_add_js(drupal_get_path('module', 'notice') . '/myfunction.js');
  drupal_add_css(drupal_get_path('module', 'notice') . '/notice.css');
  
$datefrom = isset($form_state['values']['notice_datefrom']) && !empty($form_state['values']['notice_datefrom']) ? $form_state['values']['notice_datefrom'] : '';	
$dateto = isset($form_state['values']['notice_dateto']) && !empty($form_state['values']['notice_dateto']) ? $form_state['values']['notice_dateto'] : '';
																				
$noticesearch = isset($form_state['values']['notice_search']) && !empty($form_state['values']['notice_search']) ? $form_state['values']['notice_search'] : '';

																				  
    $form['#attributes']['class'][] = 'sky-form custom-form-main';
	
	 $form['noticedate'] = array(
	   '#title'=>'',
	   '#type' => 'radios',
	   '#options' => array('N'=>t('Notice Date'),'T'=>t('Description Search')),
	   '#default_value' => 'T',
	   '#attributes' => array('class'=>array('noticedate_radio')),
	   '#prefix' => '<div class="row"><section class="col col-12 app-regs-gender"><label class="radios">Search By',
	   '#suffix' => '</label></section></div>',
	);
	
	$form['notice_datefrom'] = array(
		'#type' => 'textfield',
		'#title' => t(''),
		'#attributes' => array('id' => 'awarddatefrom','class'=>array('dateshow'), 'placeholder'=>'Notice Date From', 'autocomplete' => 'off'),
	    '#prefix' => '<div id="dateshowfrom"> <div class="col col-4"><label class="input"><i class="icon-prepend icon-calendar"></i>Date From',
		'#suffix' => '</label></div></div>',
	);
	$form['notice_dateto'] = array(
		'#type' => 'textfield',
		'#title' => t(''),
		'#attributes' => array('id' => 'awarddateto','class'=>array('dateshow'), 'placeholder'=>'Notice Date To', 'autocomplete' => 'off'),
		'#prefix' => '<div id="dateshowto"><div class="col col-4"><label class="input"><i class="icon-prepend icon-calendar"></i>Date To',
		'#suffix' => '</label></div></div>',
	  );

  $form['notice_search'] = array(
			'#type' => 'textfield',
			'#title' => t(''),
			'#attributes' => array('class'=>array(''), 'placeholder'=>'Notice Search', 'autocomplete' => 'off'),
			'#prefix' => '<div id="searchshow"><div class="col col-8"><label class="input"><i class="icon-prepend icon-search"></i>Notice Search',
	        '#suffix' => '</label></div></div>',
	 );
	
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Search',
		'#ajax' => array(
			'callback' => 'ajax_notice_callback',
		),
		'#attributes' => array('class'=>array('btn btn-success form-submit')),
		'#prefix' => '<div class="col col-4 search-btm">',
  		'#suffix' => '</div>',
     ); 
	 
	 $form['add_notice_list'] = array(
	  '#type' => 'markup',
	  '#markup' => '<div id="notice_replace"><div class="col col-12">'.notice_list($datefrom,$dateto,$noticesearch).'</div></div>',
    );	
	
	return  $form;
	
}

<<<<<<< HEAD


=======
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
 function notice_list_form_submit($form, &$form_state){
	//print_r( $form_state['values']['notice_datefrom'].'hiii'. $form_state['values']['notice_dateto']);
	//die();
	$form_state['rebuild'] = TRUE;
 }

function notice_list($datefrom='',$dateto='',$noticesearch=''){
	
	 global $base_root, $base_path;
	 $sort = 'DESC';
	 $order = 'noticedate';
	 //$db_or = db_or();
	 
     $cms_notice_query = db_select('cms_notice', 't');
     $cms_notice_query->fields('t', array('nid','noticedesc','noticedate','noticefile'));
	 
	  if($datefrom!='' && $dateto!=''){
		 $noticesearch ="";
		 $datefrom = date('Y-m-d', strtotime($datefrom));
		 $dateto = date('Y-m-d', strtotime($dateto));
		 $cms_notice_query->condition('t.noticedate',array($datefrom,$dateto),'BETWEEN');
	   }
	   
	  if($noticesearch!=''){
		  $datefrom='';
		  $dateto='';
		  $cms_notice_query->condition('t.noticedesc', '%' . db_like($noticesearch) . '%', 'LIKE');
		  //$cms_notice_query->condition($db_or);	  
	  }
		    
	 $cms_notice_query = $cms_notice_query->extend('TableSort')->extend('PagerDefault')->limit(20);
	 $cms_notice_query->orderBy($order, $sort);
	 $cms_notice_query_result = $cms_notice_query->execute();
	 $cms_notice_query_result_data = $cms_notice_query_result->fetchAll();
	 
	 //$count = count($cms_notice_query_result_data);
	 
	 
	 //print_r($cms_notice_query_result_data); exit; 
	 
	 $rows = array();
     $header = array();
  	 $output = '';
  
     $header = array(
          array('data'=> 'SL.NO'.$count),
		  array('data'=> 'DATE'),
          array('data' => 'DESCRIPTION'),
		  array('data' => 'FILE'),
      );
	 	
	//$i=0;
	 
	 if($_GET['page'] == ""){
		 $p = 0;
	 }else{
		 $p = $_GET['page'];
	 }
	 $i = 20*($p) + 1;
	 
	 foreach($cms_notice_query_result_data as $data){
		
		$aa=$base_root.$base_path.'sites/default/files/upload/notice/'.$data->noticefile;
		$link_s=l(t('Download'), $aa, array('attributes' => array('target'=>'_blank'))) ;
		$rows[] = array(
      				$i,
					date('d-m-Y', strtotime($data->noticedate)),
      				$data->noticedesc,
					$link_s
	  	); 
		
		$i++;  
	 }
	 
      				
	 
	 $output = theme_table(
    array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('class' => array('table', 'table-bordered')),
      'sticky' => true,
      'caption' => '',
      'colgroups' => array(),
      'empty' => t("No data found!") // The message to be displayed if table is empty
    )
  ).theme('pager');

  	 
    return '<div class="table-responsive statistics_box">'.$output.'</div>';
}

function cmsnotice_list($form, &$form_state){
	
	$form['add_notice'] = array(
	  '#type' => 'markup',
	  '#markup' => l('Add Notice','cmsentry/cmsnotice/addcmsnotice'),
    );	
	
	$form['notice_list_details'] = array(
	  '#type' => 'markup',
	  '#markup' => get_notice_list(),
    );	
	return $form;
}
function get_notice_list(){
	 global $base_root, $base_path;
	 $sort = 'DESC';
	 $order = 'noticedate';
     $cms_notice_query = db_select('cms_notice', 't');
     $cms_notice_query->fields('t', array('nid','noticedesc','noticedate','noticeno'));
	 $cms_notice_query = $cms_notice_query->extend('TableSort')->extend('PagerDefault')->limit(20);
	 $cms_notice_query->orderBy($order, $sort);
	 $cms_notice_query_result = $cms_notice_query->execute();
	 $cms_notice_query_result_data = $cms_notice_query_result->fetchAll();
	 
	 $rows = array();
     $header = array();
  	 $output = '';
  
     $header = array(
          array('data'=> 'Notification SL.NO'),
		  array('data'=> 'Notification DATE'),
		  array('data'=> 'Notification No.'),
          array('data' => 'Notification DESCRIPTION'),
		  array('data' => 'Notification VIEW/EDIT'),
      );
	 $i=0;
	 if($_GET['page'] == ""){
		 $p = 0;
	 }else{
		 $p = $_GET['page'];
	 }
	 $i = 20*($p) + 1;
	 foreach($cms_notice_query_result_data as $data){
		//$i;
		$aa=$base_root.$base_path.'cmsentry/cmsnotice/'.$data->nid.'/cmsnoticeedit';
		$link_s=l(t('View/Edit'), $aa) ;
		$rows[] = array(
      				$i++,
					date('d-m-Y', strtotime($data->noticedate)),
					$data->noticeno,
      				$data->noticedesc,
					$link_s
	  	);
		//$i++;     
	 }
	 
      				
	 
	 $output = theme_table(
    array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('class' => array('table', 'table-bordered')),
      'sticky' => true,
      'caption' => '',
      'colgroups' => array(),
      'empty' => t("No data found!") // The message to be displayed if table is empty
    )
  ).theme('pager');

  	 
    return '<div class="table-responsive statistics_box">'.$output.'</div>';
}

function add_notice($form, &$form_state){
 // echo "hi"; exit;
   global $base_root, $base_path;
	 
   $form['add_notice_date'] = array(
	 '#title'=>' Notification Date :',
	 '#type' => 'date',
     '#default_value' => array(
         'month' => format_date(time(), 'custom', 'n'),
         'day' => format_date(time(), 'custom', 'j'),
         'year' => format_date(time(), 'custom', 'Y'),
       ),
	 '#required' => TRUE,
	 );  
	 
	$form['add_notice_no'] = array(
	   '#title'=>'Notification Number : ',
	   '#type' => 'textfield',
	   //'#element_validate' => array('notice_textfield_validate'),
	   '#required' => TRUE,
	); 
		 
	$form['add_notice_desc'] = array(
	   '#title'=>'Notification Description :',
	   '#cols' => 20, 
       '#rows' => 4,
	   '#type' => 'textarea',
	   '#element_validate' => array('notice_textfield_validate'),
	   '#required' => TRUE,
	);
		 
    $form['add_notice_pdf'] = array(
	   '#title' => t(' Upload Scanned file of the Notification (JPG,PDF only)'),
	   '#type' => 'managed_file',
<<<<<<< HEAD
	   '#upload_validators' => array('file_validate_extensions' => array('pdf jpg'), 'file_validate_size' => array(10*1024*1024)),
=======
	   '#upload_validators' => array('file_validate_extensions' => array('pdf jpg'), 'file_validate_size' => array(50*1024*1024)),
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
	   '#upload_location' => 'public://upload/notice/',
	   '#process' => array('import_my_file_element_process'),
	   '#required' => TRUE,
	);
	
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Save',
		'#prefix' => '<div align="center">',  
        '#suffix' => '</div>',
     ); 
	  
	return  $form;
	 
 }
<<<<<<< HEAD

 function add_notice_validate($form, &$form_state) {
  $fid = $form_state['values']['add_notice_pdf'];
  if (is_array($fid)) {
    $fid = reset($fid);
  }

  if ($fid) {
    $file = file_load($fid);
    if ($file) {
      $filename = $file->filename;
      $filepath = drupal_realpath($file->uri);

      // 1. Check for double extensions like .exe.pdf
      if (preg_match('/\.[^\.]+\.[^\.]+$/', $filename)) {
        file_delete($file);
        form_set_error('add_notice_pdf', t('Double extension files are not allowed. Only JPG or PDF files are permitted.'));
        $form_state['rebuild'] = TRUE;
        return;
      }

      // 2. Detect actual MIME type
      if (function_exists('finfo_open')) {
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mime = finfo_file($finfo, $filepath);
        finfo_close($finfo);
      } else {
        $mime = mime_content_type($filepath); // fallback
      }

      // 3. Check if MIME is valid
      $allowed_mime = ['application/pdf', 'image/jpeg'];
      if (!in_array($mime, $allowed_mime)) {
        file_delete($file);
        form_set_error('add_notice_pdf', t('Invalid file content (%mime). Only valid PDF or JPG files are allowed.', ['%mime' => $mime]));
        $form_state['rebuild'] = TRUE;
        return;
      }
    }
  }
}


=======
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
 
function add_notice_submit($form, &$form_state){ 
   //echo "hi"; exit;
	$arr = array();
	$noticePdf = "";
	
	$notice_desc=check_plain($form_state['values']['add_notice_desc']);
	$noticeno = $form_state['values']['add_notice_no'];
	$notice_date=$form_state['values']['add_notice_date']['year'].'-'.$form_state['values']['add_notice_date']['month'].'-'.$form_state['values']['add_notice_date']['day']; 

	$notice_doc = file_load($form_state['values']['add_notice_pdf']);
	if(!empty($notice_doc)){
		$arr = explode("/", $notice_doc->uri);
		$notice_doc->status = FILE_STATUS_PERMANENT;
		file_save($notice_doc);
		$noticePdf = $arr[4];
	 }
	
	$noticeInfo = array('noticedate'=>$notice_date,
						'noticeno'=>$noticeno,
						'noticedesc'=>$notice_desc,
						'noticefile' => $noticePdf);
						
	$id = db_insert('cms_notice')->fields($noticeInfo)->execute();
	drupal_set_message('Your Record has been inserted successfully.');

}


function edit_notice($form, &$form_state, $args=''){
   global $base_root, $base_path;
   
   $cms_notice_query = db_select('cms_notice', 't');
   $cms_notice_query->fields('t', array('nid','noticedesc','noticedate','noticefile','noticeno'));	
   $cms_notice_query->condition('t.nid',trim($args),'=');
   $qry_data = $cms_notice_query->execute();
   $result = $qry_data->fetchAssoc();
   
   if($result['noticedate']!=""){
	   	$cdate = explode("-", $result['noticedate']);
		
		$cdate[1]= ltrim($cdate[1], '0'); 
		$cdate[2]= ltrim($cdate[2], '0');  
		$form['edit_notice_date'] = array(
		 '#title'=>' Notice Date :',
		 '#type' => 'date',
		 '#default_value' => array(
			 'month' => format_date(time(), 'custom', $cdate['1']),
			 'day' => format_date(time(), 'custom', $cdate['2']),
			 'year' => format_date(time(), 'custom', $cdate['0']),
		   ),
		 '#required' => TRUE,
		 );   
   }else{
	   $form['edit_notice_date'] = array(
		 '#title'=>' Notice Date :',
		 '#type' => 'date',
		 '#default_value' => array(
			 'month' => format_date(time(), 'custom', 'n'),
			 'day' => format_date(time(), 'custom', 'j'),
			 'year' => format_date(time(), 'custom', 'Y'),
		   ),
		 '#required' => TRUE,
		 );  
   }
   
    
	$form['edit_notice_no'] = array(
	   '#title'=>'Notification Number : ',
	   '#type' => 'textfield',
	   //'#element_validate' => array('notice_textfield_validate'),
	   '#default_value' =>trim($result['noticeno']),
	   '#required' => TRUE,
	); 
		 
	$form['edit_notice_desc'] = array(
	   '#title'=>'Notice Description :',
	   '#cols' => 20, 
       '#rows' => 4,
	   '#type' => 'textarea',
	   '#default_value' =>trim($result['noticedesc']),
	   '#element_validate' => array('notice_textfield_validate'),
	   '#required' => TRUE,
	);
	
<<<<<<< HEAD
	// $uri = 'public://upload/notice/'.trim($result['noticefile']);
	
	// if (file_exists($uri)) {
	// 	$form['notice_file_up'] = array(
 //        '#markup' => l(t('<img src="'.$GLOBALS['base_url']."/".drupal_get_path('theme', 'labourdept').'/images/pdf.png">'),
	// 		     ''.$GLOBALS['base_url'].'/sites/default/files/upload/notice/'.$result['noticefile'], array('html' => TRUE,
	// 			 'attributes'=>array('target'=>'_blank' , 'class'=>array('pdfloc1')))),
 //        );
	// 	$form['scan_file'] = array(
 //        '#type' => 'hidden',
	// 	'#default_value' => trim($result['noticefile']),
 //        );
	// }else{
	// 	$form['notice_file_up'] = array(
 //        '#markup' => t('No File Exist'),
	// 	'#prefix' => '<div class="pdfnone">',
	//     '#suffix' => '</div>'
 //        );
	// }

  $uri = 'public://upload/notice/' . trim($result['noticefile']);

if (file_exists(drupal_realpath($uri))) {
  $download_link = url('cmsentry/notice/download/' . trim($result['noticefile']), array('absolute' => TRUE));
  $img_html = '<img src="' . $GLOBALS['base_url'] . '/' . drupal_get_path('theme', 'labourdept') . '/images/pdf.png" alt="Download PDF">';
  
  $form['notice_file_up'] = array(
    '#markup' => l($img_html, $download_link, array(
      'html' => TRUE,
      'attributes' => array('class' => array('pdfloc1'))
    )),
  );

  $form['scan_file'] = array(
    '#type' => 'hidden',
    '#default_value' => trim($result['noticefile']),
  );
} else {
  $form['notice_file_up'] = array(
    '#markup' => t('No File Exist'),
    '#prefix' => '<div class="pdfnone">',
    '#suffix' => '</div>',
  );
}


=======
	$uri = 'public://upload/notice/'.trim($result['noticefile']);
	
	if (file_exists($uri)) {
		$form['notice_file_up'] = array(
        '#markup' => l(t('<img src="'.$GLOBALS['base_url']."/".drupal_get_path('theme', 'labourdept').'/images/pdf.png">'),
			     ''.$GLOBALS['base_url'].'/sites/default/files/upload/notice/'.$result['noticefile'], array('html' => TRUE,
				 'attributes'=>array('target'=>'_blank' , 'class'=>array('pdfloc1')))),
        );
		$form['scan_file'] = array(
        '#type' => 'hidden',
		'#default_value' => trim($result['noticefile']),
        );
	}else{
		$form['notice_file_up'] = array(
        '#markup' => t('No File Exist'),
		'#prefix' => '<div class="pdfnone">',
	    '#suffix' => '</div>'
        );
	}
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
		 
    $form['edit_notice_pdf'] = array(
	   '#title' => t(' Upload an notice Scaned file (JPG,PDF only)'),
	   '#type' => 'managed_file',
<<<<<<< HEAD
	   '#upload_validators' => array('file_validate_extensions' => array('pdf jpg'), 'file_validate_size' => array(10*1024*1024)),
=======
	   '#upload_validators' => array('file_validate_extensions' => array('pdf jpg'), 'file_validate_size' => array(50*1024*1024)),
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
	   '#upload_location' => 'public://upload/notice/',
	   '#process' => array('import_my_file_element_process'),
	   //'#required' => TRUE,
	);
	$form['notice_id'] = array(
		'#title' => t('Notice Id'),
		'#type' => 'hidden',
		'#default_value' => isset($args) ? $args : NULL,
	);	
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'Save',
		'#prefix' => '<div align="center">',  
        '#suffix' => '</div>',
     ); 
	  
	return  $form;
	 
 } 
<<<<<<< HEAD

 function edit_notice_validate($form, &$form_state) {
  $fid = $form_state['values']['edit_notice_pdf'];

  if (is_array($fid)) {
    $fid = reset($fid); // Get the first FID
  }

  if ($fid) {
    $file = file_load($fid);
    if ($file) {
      $filename = $file->filename;
      $filepath = drupal_realpath($file->uri);

      // 1. Check for double extensions like .exe.pdf
      if (preg_match('/\.[^\.]+\.[^\.]+$/', $filename)) {
        file_delete($file);
        form_set_error('edit_notice_pdf', t('Double extension files are not allowed. Only JPG or PDF files are permitted.'));
        $form_state['rebuild'] = TRUE;
        return;
      }

      // 2. Validate real MIME type using finfo or fallback
      if (function_exists('finfo_open')) {
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mime = finfo_file($finfo, $filepath);
        finfo_close($finfo);
      } else {
        $mime = mime_content_type($filepath);
      }

      // 3. Allow only real PDF or JPG
      $allowed_mime = ['application/pdf', 'image/jpeg'];
      if (!in_array($mime, $allowed_mime)) {
        file_delete($file);
        form_set_error('edit_notice_pdf', t('Invalid file type (%mime). Only valid PDF or JPG files are allowed.', ['%mime' => $mime]));
        $form_state['rebuild'] = TRUE;
        return;
      }
    }
  }
}


=======
>>>>>>> 14d853556ffd3e8fabc4403330a38ba0b5494614
 
function edit_notice_submit($form, &$form_state){ 
//echo "hi"; exit;
	$arr = array();
	$noticePdf = "";
	
	$notice_desc=check_plain($form_state['values']['edit_notice_desc']);
	$noticeno = $form_state['values']['edit_notice_no'];
	$notice_date=$form_state['values']['edit_notice_date']['year'].'-'.$form_state['values']['edit_notice_date']['month'].'-'.$form_state['values']['edit_notice_date']['day']; 

	$notice_doc = file_load($form_state['values']['edit_notice_pdf']);
	if(!empty($notice_doc)){
		$arr = explode("/", $notice_doc->uri);
		$notice_doc->status = FILE_STATUS_PERMANENT;
		file_save($notice_doc);
		$noticePdf = $arr[4];
	 }else{
		$file_name=$form_state['values']['scan_file'];
		$noticePdf = $file_name;
	}
	
	$noticeInfo = array('noticedate'=>$notice_date,
						'noticeno'=>$noticeno,
						'noticedesc'=>$notice_desc,
						'noticefile' => $noticePdf);
						
	$query = db_update('cms_notice');
	$query->fields(array('noticedate' =>	$notice_date,
						 'noticeno'	  =>	$noticeno,
						 'noticedesc' =>	$notice_desc,
 						 'noticefile' =>	$noticePdf));
	$query->condition('nid', $form_state['values']['notice_id']);
	$rs = $query->execute();
	if($rs){
		drupal_set_message("Your data has been updated successfully");
		drupal_goto('cmsentry/cmsnotice');
	}

} 

 
function notice_textfield_validate($element, &$form_state) {
   if(trim($element['#value']))
   {
        $val="a".trim($element['#value']);
		if(stripos($val,"~") >0  || stripos($val,"!") >0 || stripos($val,"@")>0 || stripos($val,"<")>0 || stripos($val,">")>0 || stripos($val,"'")>0 || stripos($val,"$")>0 || stripos($val,"#")>0 || stripos($val,"%")>0 || stripos($val,"^")>0  || stripos($val,"*")>0){
       form_error($element, t($element['#title'].'  contain illegal character .'));
	   }
   }
}

/* It disables the default upload button that comes with this #managed_file form 
function import_my_file_element_process($element, &$form_state, $form) {
  $element = file_managed_file_process($element, $form_state, $form);
  $element['upload_button']['#access'] = FALSE;
 
  return $element;
}*/

function ajax_notice_callback($form,&$form_state){
	$commands   = array();
	if($form_state['values']['noticedate'] == 'N'){
	$commands[] = ajax_command_replace('#notice_replace', '<div id="notice_replace">'.notice_list($form_state['values']['notice_datefrom'],$form_state['values']['notice_dateto'],'').'</div>');
	}
	elseif($form_state['values']['noticedate'] == 'T'){
		$commands[] = ajax_command_replace('#notice_replace', '<div id="notice_replace">'.notice_list('','',$form_state['values']['notice_search']).'</div>');
	}
	else{
		$commands[] = ajax_command_replace('#notice_replace', '<div id="notice_replace">'.notice_list('','','').'</div>');
     }
   return array('#type' => 'ajax', '#commands' => $commands);
}
